# ----------------------------------------------------------------------
# © 2025 KR-Labs. All rights reserved.
# KR-Labs™ is a trademark of Quipu Research Labs, LLC,
# a subsidiary of Sudiata Giddasira, Inc.
# ----------------------------------------------------------------------
# SPDX-License-Identifier: MIT

name: Tutorial Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check-structure:
    name: Verify Repository Structure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Check required directories
        run: |
          echo "Checking repository structure..."
          
          required_dirs=(
            "notebooks"
            "docs"
            ".github"
          )
          
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✅ $dir/ exists"
            else
              echo "❌ $dir/ is missing"
              exit 1
            fi
          done
      
      - name: Check required files
        run: |
          echo "Checking required files..."
          
          required_files=(
            "README.md"
            "LICENSE"
            "CONTRIBUTING.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done
      
      - name: Verify notebook organization
        run: |
          echo "Checking notebook organization..."
          python -c "
          from pathlib import Path
          import json
          
          notebooks = sorted(Path('notebooks').rglob('*.ipynb'))
          
          # Expected tiers
          tiers = ['D1', 'D2', 'D3', 'D4', 'D5', 'D6']
          tier_counts = {tier: 0 for tier in tiers}
          
          print(f'Found {len(notebooks)} notebooks\n')
          
          for nb in notebooks:
              # Extract tier from filename (e.g., D1_*.ipynb)
              tier = nb.stem.split('_')[0] if '_' in nb.stem else 'Unknown'
              if tier in tier_counts:
                  tier_counts[tier] += 1
              print(f'  {nb.name} -> Tier {tier}')
          
          print(f'\nTier Distribution:')
          for tier in tiers:
              count = tier_counts[tier]
              print(f'  {tier}: {count} tutorial(s)')
          
          # Verify we have tutorials in each tier
          missing_tiers = [tier for tier, count in tier_counts.items() if count == 0]
          if missing_tiers:
              print(f'\n⚠️  Missing tutorials in tiers: {missing_tiers}')
          else:
              print(f'\n✅ All tiers have tutorials')
          "
      
      - name: Check copyright headers
        run: |
          echo "Checking copyright headers in notebooks..."
          python -c "
          import nbformat
          from pathlib import Path
          
          notebooks = list(Path('notebooks').rglob('*.ipynb'))
          missing_copyright = []
          
          for nb_path in notebooks:
              with open(nb_path, 'r', encoding='utf-8') as f:
                  nb = nbformat.read(f, as_version=4)
              
              # Check first cell for copyright
              if nb.cells:
                  first_cell = nb.cells[0]
                  content = first_cell.get('source', '')
                  
                  if '© 2025 KR-Labs' not in content and 'Copyright' not in content:
                      missing_copyright.append(nb_path.name)
          
          if missing_copyright:
              print(f'⚠️  {len(missing_copyright)} notebook(s) missing copyright header:')
              for nb in missing_copyright:
                  print(f'  - {nb}')
          else:
              print(f'✅ All notebooks have copyright headers')
          "
        continue-on-error: true
  
  check-educational-quality:
    name: Educational Content Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nbformat
      
      - name: Check for learning objectives
        run: |
          echo "Checking for learning objectives in notebooks..."
          python -c "
          import nbformat
          from pathlib import Path
          
          notebooks = list(Path('notebooks').rglob('*.ipynb'))
          missing_objectives = []
          
          keywords = ['learning objective', 'objectives', 'you will learn', 'this tutorial']
          
          for nb_path in notebooks:
              with open(nb_path, 'r', encoding='utf-8') as f:
                  nb = nbformat.read(f, as_version=4)
              
              # Check first few cells for learning objectives
              has_objectives = False
              for cell in nb.cells[:5]:
                  content = cell.get('source', '').lower()
                  if any(keyword in content for keyword in keywords):
                      has_objectives = True
                      break
              
              if not has_objectives:
                  missing_objectives.append(nb_path.name)
          
          if missing_objectives:
              print(f'⚠️  {len(missing_objectives)} notebook(s) may be missing learning objectives:')
              for nb in missing_objectives:
                  print(f'  - {nb}')
          else:
              print(f'✅ All notebooks appear to have learning objectives')
          "
        continue-on-error: true
      
      - name: Check for references section
        run: |
          echo "Checking for References section in notebooks..."
          python -c "
          import nbformat
          from pathlib import Path
          
          notebooks = list(Path('notebooks').rglob('*.ipynb'))
          missing_references = []
          
          for nb_path in notebooks:
              with open(nb_path, 'r', encoding='utf-8') as f:
                  nb = nbformat.read(f, as_version=4)
              
              # Check for References heading
              has_references = False
              for cell in nb.cells:
                  if cell.cell_type == 'markdown':
                      content = cell.get('source', '')
                      if '## References' in content or '# References' in content:
                          has_references = True
                          break
              
              if not has_references:
                  missing_references.append(nb_path.name)
          
          if missing_references:
              print(f'⚠️  {len(missing_references)} notebook(s) missing References section:')
              for nb in missing_references:
                  print(f'  - {nb}')
          else:
              print(f'✅ All notebooks have References section')
          "
        continue-on-error: true
      
      - name: Analyze code-to-text ratio
        run: |
          echo "Analyzing code-to-text balance..."
          python -c "
          import nbformat
          from pathlib import Path
          
          notebooks = list(Path('notebooks').rglob('*.ipynb'))
          
          for nb_path in notebooks:
              with open(nb_path, 'r', encoding='utf-8') as f:
                  nb = nbformat.read(f, as_version=4)
              
              code_cells = sum(1 for cell in nb.cells if cell.cell_type == 'code')
              text_cells = sum(1 for cell in nb.cells if cell.cell_type == 'markdown')
              total_cells = len(nb.cells)
              
              if total_cells > 0:
                  code_ratio = code_cells / total_cells * 100
                  text_ratio = text_cells / total_cells * 100
                  
                  status = '✅' if text_ratio >= 30 else '⚠️ '
                  print(f'{status} {nb_path.name}:')
                  print(f'    Code: {code_cells} cells ({code_ratio:.1f}%)')
                  print(f'    Text: {text_cells} cells ({text_ratio:.1f}%)')
                  
                  if text_ratio < 30:
                      print(f'    Consider adding more explanatory text')
                  print()
          "
        continue-on-error: true
