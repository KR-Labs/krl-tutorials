# Copyright (c) 2024 Sudiata Giddasira, Inc. d/b/a Quipu Research Labs, LLC d/b/a KR-Labsâ„¢
# SPDX-License-Identifier: MIT

name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to reduce CI time
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better coverage analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev,test]"
    
    - name: Run linting
      run: |
        pip install black flake8 mypy isort
        black --check src/ tests/
        isort --check-only src/ tests/
        flake8 src/ tests/ --max-line-length=100
        mypy src/ --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        pytest tests/ -m "unit and not slow" --cov=src --cov-report=xml --cov-report=term
      env:
        # Mock API keys for unit tests (not real credentials)
        CENSUS_API_KEY: ${{ secrets.CENSUS_API_KEY || 'mock_census_key' }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY || 'mock_fred_key' }}
        BLS_API_KEY: ${{ secrets.BLS_API_KEY || 'mock_bls_key' }}
    
    - name: Run integration tests (only on Linux with Python 3.11)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pytest tests/ -m "integration" --cov=src --cov-report=xml --cov-append
      env:
        CENSUS_API_KEY: ${{ secrets.CENSUS_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        BLS_API_KEY: ${{ secrets.BLS_API_KEY }}
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage to Coveralls
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage.xml
        format: cobertura
    
    - name: Generate coverage report
      if: always()
      run: |
        pip install coverage[toml]
        coverage report --show-missing
        coverage html
    
    - name: Upload coverage HTML
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov/

  test-docs:
    name: Test Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
    
    - name: Build documentation
      run: |
        cd docs
        make html
        make linkcheck
    
    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  test-performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -e ".[dev,test]"
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/ -m "benchmark" --benchmark-only --benchmark-json=benchmark.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
